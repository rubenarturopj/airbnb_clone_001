Next.js 13

Has an experimental /app/ folder phase. Instead of using /src/, it's using /app/.

Next.js work for both server and client side.

- - - - - - - - Client side - - - - - - - -
"use client"

If we're working with components that will help the client directly, then we need to write
 "use client" on top of that file. So we hydrate it to the client.

Components that need use client, when we use:
- Interactivity and EventListeners: onClick(), onChange(), etc.
- Use state and lifecycle effects: useState(), useReducer(), useEffect(), etc.
- Use Browser-only APIs.
- Use costum hooks that depend on state, effects, or browser-only APIs.
- *** Fetch data BUT only when necessary, specific reasons. It's always better to do it on the server side.

- - - - - - - - Server side - - - - - - - 
Components that need _______, when we:

- Fetch data. (((Always recommended doing it on the server side, unless specific reasons 
to do it on the client side. Fetching data from the server, and then move it to the client, 
leads to better performance and user experience)))
- Access backendd resources (directly).
- Keep sensitive information on the server (access tokens, API keys, etc).
- Keep large dependencies on the server / Reduce client-side JavaScript.


- - - - - - - - - - - - - - - - - - 
- - - - - - - - - - - - - - - - - - 
- - - - - - - - - - - - - - - - - -

Router

Next.js 13 has included a router that you import like this
import { useRouter } from "next/navigation";
and you then invoke like this
const router = useRouter();

Now you can use it like this:
onClick={() => router.push("/trips")}

With this way we are creating another page in our website, like: MainPage/trips, 
MainPage/user, MainPage/Products, MainPage/aboutus.

But for every router we have to create a folder with the same name in the APP folder.
For example: for onClick={() => router.push("/trips")} we need to creat a folder called "trips"
path:   app/trips     inside we need to create a file always named    "page.tsx"